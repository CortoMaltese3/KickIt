@model TeamProject.ModelsViews.BookViewModel
@using TeamProject.Models
@{
    ViewBag.Title = "Book";
    Layout = "~/Views/Shared/_LayoutBooking.cshtml";
}

@section styles
{
    <link rel="stylesheet" href="~/Content/book.css" />
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.7.2/css/all.css" integrity="sha384-fnmOCqbTlWIlj8LyTjo7mOUStjsKC4pOpQbqyi7RrhN7udi9RwhKkMHpvLbHG9Sr" crossorigin="anonymous">
}
<div class="row">

    <nav class="col-2 sidenav">
        <ul class="list-group">
            @foreach (var court in Model.Courts)
            {
                <li court-id="@court.Id" class="list-group-item d-flex justify-content-between align-items-center">@court.Name</li>
            }
        </ul>
    </nav>

    <main class="col-10">
        <h1 class="bd-title">Book for <span id="court-title"></span></h1>
        <div class="row timeslot-header">
            <div id="prev-week-btn" class="col-1"><i class="fas fa-arrow-circle-left"></i></div>
            <h3 id="timeslot-week" class="col text-lg-center">...</h3>
            <div id="next-week-btn" class="col-1"><i class="fas fa-arrow-circle-right"></i></div>
        </div>
        <div id="data-container"></div>

        <!-- Modal for booking confirmation -->
        <div class="modal fade" id="confirm-modal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Title</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        Body
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary cancel-button" data-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary confirm-button" id="confirm-booking">Confirm</button>
                        <button type="button" class="btn btn-primary ok-button" data-dismiss="modal">Ok</button>
                    </div>
                </div>
            </div>
        </div>
    </main>

</div>
@section scripts
{
    <script src="~/Scripts/moment.js"></script>
    <script>

        $(document).ready(function () {

            const $container = $('#data-container'),
                timeslotDate = TimeslotDate(refreshTimeslotsTable),
                $courtTitle=$('#court-title'),
                utils = {

                    // returns selected courtId
                    getSelectedCourtId: function () {
                        return $('nav.sidenav li.active').attr('court-id');
                    },

                    // returns divs with week days for timeslot header
                    getTimeslotsHeader: function (date) {
                        let headerBlock = '<div class="col text-center">{date}</div>';

                        return headerBlock.replace('{date}', '') +
                            [0, 1, 2, 3, 4, 5, 6].map(function (i) {
                                return headerBlock.replace('{date}', date.add(i,'days').format('dddd<br/>DD MMM'));
                            })
                            .join('');
                    },

                    // return div with week days timeslots body
                    getTimeslotsBody: function (data) {
                        let tbody = '';
                        let date = timeslotDate.firstWeekDate();

                        data.map(function (timeslot) {
                            let localhour = moment(timeslot.Hour,'HH:mm');

                            tbody += '<div class="row timeslot">';

                            tbody += '<div class="col text-center">' + localhour.format('HH:mm') + '</div>';

                            for (let day = 0; day < 7; day++) {
                                let dateTime = date.clone().add(day, 'days').hour(localhour.hour());
                                let timeSlotValue = timeslotDate.okToSelectDate(dateTime) ? timeslot['Day' + (day + 1)] : "0";
                                let showTime = (timeSlotValue == 1 ? localhour.format('HH:mm') : '');
                                tbody += '<div class="col text-center" date = "' + dateTime.utc().format() + '" value="' + timeSlotValue + '">' + showTime + '</div>';
                            }

                            tbody += '</div>';
                        });

                        return tbody;
                    },

                    // set active courtId on side nav bar
                    // and update header title
                    setActiveCourt: function (courtId) {
                        const $courtItem = $('nav.sidenav li[court-id="' + courtId + '"]');

                        $courtItem.addClass('active');
                        $courtTitle.text($courtItem.text());
                    }
                }
            let bookingData;

            $('#next-week-btn').on('click', timeslotDate.goNextWeek);
            $('#prev-week-btn').on('click', timeslotDate.goPrevWeek);
            $('#data-container').on('click', '.timeslot div[value="1"]', onTimeslotClick);
            $('nav').on('click', 'li', onNavCourtClick);
            $('#confirm-booking').on('click', onBookingConfirm);
            utils.setActiveCourt(@Model.CourtId);

            // update period date title
            // and call refreshtimeslots
            timeslotDate.updatePeriod();

            // refresh timeslots called from updatePeriod
            function refreshTimeslotsTable() {
                getTimeslots(utils.getSelectedCourtId());
            }

            // Get timeslots and build container header+body
            function getTimeslots(courtId) {
                const fromDate = timeslotDate.firstWeekDate(),
                    toDate = timeslotDate.lastWeekDate();
                
                $.getJSON('/api/book/' + courtId, {
                    type: 'ForBooking',
                    fromDate: fromDate.clone().utc().format(),
                    toDate: toDate.utc().format()
                }).done(function (data) {

                    $container.html(
                        '<div class="timeslots">' +
                        '<div class="row">' + utils.getTimeslotsHeader(fromDate) + '</div>' +
                            utils.getTimeslotsBody(data) +
                        '</div>');

                });
            }


            // on clicked timeslot book selected date time
            function onTimeslotClick() {
                let dateTime = moment($(this).attr('date'));

                bookingData = {
                    courtId: utils.getSelectedCourtId(),
                    bookedAt: dateTime.format()
                };

                openModalConfirmation(dateTime.local().format('dddd DD/MM/YYYY HH:mm'), $courtTitle.text());

            }

            function openModalConfirmation(dateTime, courtName) {
                openModal({
                    title: 'Please Confirm Booking Info',
                    body: '<h4>' + dateTime + '<small class="text-muted"> at ' + courtName + '</small></h4>',
                    buttons: ['cancel','confirm']
                });
            }
            function openModalWithError(title, message) {
                openModal({
                    title: title,
                    body: message,
                    buttons: ['ok']
                });
            }

            function openModal(options) {
                $('#confirm-modal .modal-title').text(options.title);
                $('#confirm-modal .modal-body').html(options.body);
                $('#confirm-modal .modal-footer button').hide();
                options.buttons.map(b => $('#confirm-modal .' + b + '-button').show());
                $('#confirm-modal').modal('show');
            }

            function onBookingConfirm() {
                $('#confirm-modal').modal('hide');

                $.ajax({
                    url: '/api/book/',
                    type: "POST",
                    accepts: "application/json",
                    contentType: "application/json",
                    data: JSON.stringify(bookingData),
                    success: function (result) {

                        if (result.Status === "Ok") {

                            // Redirect to Booking Information and Send email
                            window.location.href = '/Courts/Confirmed/' + result.BookKey;

                        } else {
                            refreshTimeslotsTable();

                            // Open Modal with Error message
                            openModalWithError('Failed to complete booking','<h4>'+result.Status+'<h4><p>Please try again</p>');
                        }
                    }
                });
            }

            // on court click (sidebar navigation)
            // sets clicked court item active
            function onNavCourtClick() {
                const courtId = $(this).attr('court-id');

                $(this).siblings().removeClass('active');

                utils.setActiveCourt(courtId);
                getTimeslots(courtId);

            }

            // Datetime Manager for Timeslot table
            function TimeslotDate(onDateChange) {
                const $weekPeriodTitle = $('#timeslot-week'),
                    currentDate = moment(new Date()).hour(0).minute(0).second(0),
                    startDate = currentDate.clone();

                const that = {
                    // calculates and returns weeks start date based on current date
                    firstWeekDate: function () {
                        const day = currentDate.day(),
                            diff = (day == 0 ? -6 : 1) - day;
                        const date = moment(currentDate)
                            .add(diff, 'days');
                        return date;//.isAfter(startDate) ? date : startDate;
                    },
                    lastWeekDate: function () {
                        return that.firstWeekDate()
                            .add(6, 'days');
                    },
                    goNextWeek: function () {
                        currentDate.add(7, 'days');
                        that.updatePeriod();
                    },
                    goPrevWeek: function () {
                        if (currentDate.isAfter(startDate)) {
                            currentDate.subtract(7, 'days');
                            that.updatePeriod();
                        } else {
                            openModalWithError('Can not navigate to previous Date',
                                '<h4>Booking is not allowed before <small class="text-muted">' + startDate.format('DD/MM/YYYY') + '</small></h4>')
                        }
                        
                        
                    },
                    updatePeriod: function () {
                        let date = that.firstWeekDate();
                        $weekPeriodTitle.text(
                            date.format("DD/MM/YYYY") + ' - ' +
                            date.add(6, 'days').format("DD/MM/YYYY"));
                        onDateChange();
                    }, okToSelectDate: function (date) {
                        return date.isSameOrAfter(startDate);
                    }
                }
                return that;
            }
        });

    </script>
}

