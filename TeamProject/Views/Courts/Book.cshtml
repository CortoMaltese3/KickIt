@model TeamProject.ModelsViews.BookViewModel
@using TeamProject.Models
@{
    ViewBag.Title = "Book";
    Layout = "~/Views/Shared/_LayoutBooking.cshtml";
    var loggedUserId = (Session["User"] as User)?.Id ?? 0;
}

@section styles
{
    <link rel="stylesheet" href="~/Content/book.css" />
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.7.2/css/all.css" integrity="sha384-fnmOCqbTlWIlj8LyTjo7mOUStjsKC4pOpQbqyi7RrhN7udi9RwhKkMHpvLbHG9Sr" crossorigin="anonymous">
}
<div class="row">

    <nav class="col-2 sidenav">
        <ul class="list-group">
            @foreach (var court in Model.Courts)
            {
                <li court-id="@court.Id" class="list-group-item d-flex justify-content-between align-items-center">@court.Name</li>
            }
        </ul>
    </nav>

    <main class="col-10">
        <h1 class="bd-title">Book for <span id="court-title"></span></h1>
        <div class="row">
            <div id="prev-week-btn" class="col-1"><i style="font-size: 48px; color: Dodgerblue;" class="fas fa-arrow-circle-left"></i></div>
            <h3 id="timeslot-week" class="col text-lg-center">11/03/2019 - 17/03/2019</h3>
            <div id="next-week-btn" class="col-1"><i style="font-size: 48px; color: Dodgerblue;" class="fas fa-arrow-circle-right"></i></div>
        </div>
        <div id="data-container"></div>
    </main>

</div>
@section scripts
{
    <script src="~/Scripts/moment.js"></script>
    <script>

        $(document).ready(function () {
            const $container = $('#data-container'),
                timeslotDate = TimeslotDate(refreshTimeslotsTable),
                $courtTitle=$('#court-title'),
                utils = {

                    // returns selected courtId
                    getSelectedCourtId: function () {
                        return $('nav.sidenav li.active').attr('court-id');
                    },

                    // returns divs with week days for timeslot header
                    getTimeslotsHeader: function(data) {
                        return ["", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
                            .map(function (i) {
                                return '<div class="col text-center">' + i + '</div>';
                            })
                            .join('');
                    },

                    // return div with week days timeslots body
                    getTimeslotsBody: function (data) {
                        let tbody = '';

                        data.map(function (timeslot) {
                            let localhour = hourTo24Format(timeslot.Hour);

                            tbody += '<div class="row timeslot" time="' + timeslot.Hour + '">';

                            tbody += '<div class="col text-center">' + localhour + '</div>';

                            for (let j = 0; j < 7; j++) {
                                tbody += '<div class="col text-center" day="' + j + '" value="' + timeslot['Day' + (j + 1)] + '">' + (timeslot['Day' + (j + 1)] == 1 ? localhour : '') + '</div>';
                            }

                            tbody += '</div>';
                        });

                        return tbody;
                    },

                    // set active courtId on side nav bar 
                    // and update header title 
                    setActiveCourt: function (courtId) {
                        const $courtItem = $('nav.sidenav li[court-id="' + courtId + '"]');

                        $courtItem.addClass('active');
                        $courtTitle.text($courtItem.text());
                    }
                }

            $('#next-week-btn').on('click', timeslotDate.goNextWeek);
            $('#prev-week-btn').on('click', timeslotDate.goPrevWeek);
            $('#data-container').on('click', '.timeslot div[value="1"]', onTimeslotClick);
            $('nav').on('click', 'li', onNavCourtClick);

            utils.setActiveCourt(@Model.CourtId);
            
            // update period date title
            // and call refreshtimeslots 
            timeslotDate.updatePeriod();

            // refresh timeslots called from updatePeriod
            function refreshTimeslotsTable() {
                getTimeslots(utils.getSelectedCourtId());
            }

            // Get timeslots and build container header+body
            function getTimeslots(courtId) {

                $.getJSON('/api/book/' + courtId, {
                    fromDate: timeslotDate.firstWeekDate().toUTCString(),
                    toDate: timeslotDate.lastWeekDate().toUTCString()
                }).done(function (data) {

                    $container.html(
                        '<div class="timeslots">' +
                            '<div class="row">' + utils.getTimeslotsHeader() + '</div>' +
                            utils.getTimeslotsBody(data) +
                        '</div>');

                });
            }

            
            // on clicked timeslot book selected date time
            function onTimeslotClick() {
                let hour = $(this).parent().attr('time'),
                    day = $(this).attr('day'),
                    dateTime = timeslotDate.getSelectedDate(parseInt(day, 10), getHour(hour));

                let data = {
                    courtId: utils.getSelectedCourtId(),
                    userId: @loggedUserId,
                    bookedAt: dateTime.toUTCString()
                };

                $.ajax({
                    url: '/api/book/',
                    type: "POST",
                    accepts: "application/json",
                    contentType: "application/json",
                    data: JSON.stringify(data),
                    success: function (result) {
                        if (result.Status === "Ok") {
                            console.log("Ok");
                        } else {
                            console.log("Error");
                        }
                        
                        refreshTimeslotsTable();
                    }
                });
            }

            // on court click (sidebar navigation)
            // sets clicked court item active
            function onNavCourtClick() {
                const courtId = $(this).attr('court-id');

                $(this).siblings().removeClass('active');

                utils.setActiveCourt(courtId);
                getTimeslots(courtId);
                
            }



            // converts hour string to in 24 format string
            function hourTo24Format(hour) {
                return getHour(hour) + ':00';
            }

            // returns hour from hour type string
            function getHour(hour) {
                return new Date('2019-01-01 ' + hour).getHours();
            }

            function TimeslotDate(onDateChange) {
                const $weekPeriodTitle = $('#timeslot-week');
                const that = {
                    currentDate: new Date(),
                    firstWeekDay: function () {
                        return that.firstWeekDate().getDate();
                    },
                    // calculates and returns weeks start date based on current date
                    firstWeekDate: function () {
                        const day = that.currentDate.getDay(),
                            diff = that.currentDate.getDate() - day + (day == 0 ? -6 : 1);
                        return new Date(that.currentDate.setDate(diff));
                    },
                    lastWeekDate: function () {
                        return new Date(that.firstWeekDate().setDate(that.firstWeekDate().getDate() + 7));
                    },
                    updatePeriod: function () {
                        $weekPeriodTitle.text(
                            that.firstWeekDate().toLocaleDateString() + ' - ' +
                            that.lastWeekDate().toLocaleDateString());
                        onDateChange();
                    },
                    goNextWeek: function () {
                        that.currentDate.setDate(that.currentDate.getDate() + 7);
                        that.updatePeriod();
                    },
                    goPrevWeek: function () {
                        that.currentDate.setDate(that.currentDate.getDate() - 7);
                        that.updatePeriod();
                    },
                    getSelectedDate: function (day, hour) {
                        return new Date(that.firstWeekDate().getFullYear(),
                            that.firstWeekDate().getMonth(),
                            that.firstWeekDay() + day,
                            hour,
                            0, 0);
                    }
                }
                return that;
            }
        });

    </script>
}

